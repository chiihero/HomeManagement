
# 家庭物品管理系统需求文档
## 1. 项目概述
家庭物品管理系统是一个用于管理家庭物品和空间的Web应用程序，采用Java Spring Boot框架开发。该系统旨在帮助用户有效地组织、追踪和管理家庭中的各种物品和空间，包括物品的位置、状态、价值、借出记录等信息，以及提供提醒功能和数据分析功能。
## 2. 系统架构
### 2.1 技术栈
- 后端：Spring Boot、MyBatis-Plus、Spring Security
- 前端：Thymeleaf、Bootstrap 5、jQuery、ECharts
- 数据库：未明确指定，但代码显示使用关系型数据库（可能是MySQL）

### 2.2 主要模块
1. 用户认证与授权
2. 实体管理（物品/空间）
3. 标签管理
4. 借出管理
5. 提醒管理
6. 系统设置
7. 数据统计与分析

## 3. 功能需求

### 3.1 用户认证与授权

- 用户注册、登录、登出功能
- 密码找回
- 用户权限管理
- 用户个人信息管理

### 3.2 实体管理

#### 3.2.1 实体模型

实体统一表示物品和空间，具有以下基本属性：
- 实体ID（自增主键）
- 名称（必填）
- 类型（item/space，必填）
- 编码
- 规格
- 数量（物品专用）
- 价格（物品专用）
- 购买日期（物品专用）
- 保修期（月）（物品专用）
- 保修截止日期（物品专用）
- 使用频率（daily/weekly/monthly/rarely）（物品专用）
- 使用年限（物品专用）
- 使用人ID与姓名（物品专用）
- 父实体ID与名称（表示物品/空间存放在哪个实体中）
- 层级、路径、排序（空间专用，用于树状结构）
- 状态（normal/damaged/discarded/lent）（物品专用）
- 描述/备注
- 标签列表
- 图片列表
- 所有者ID（必填）
- 创建者ID、创建时间、更新时间

#### 3.2.2 实体管理功能

- 实体的增删改查
- 实体树形结构管理（空间嵌套）
- 实体列表筛选（按类型、状态、标签等）
- 实体搜索
- 实体详情查看
- 实体图片上传与管理
- 实体标签关联管理
- 数据导入导出（PDF/Excel）

### 3.3 标签管理

- 标签的增删改查
- 按所有者查询标签
- 获取物品的标签
- 设置物品的标签关联

### 3.4 借出管理

- 创建、更新、删除借出记录
- 借出状态管理（已借出、已归还、逾期等）
- 实体归还功能
- 借出记录查询（按实体、状态等）
- 未归还记录查询
- 借出状态自动检查与更新

### 3.5 提醒管理

- 创建、更新、删除提醒
- 提醒类型：保修到期、定期维护、借用归还、实体过期等
- 待处理提醒查询
- 提醒状态管理

### 3.6 系统设置

- 系统参数配置
- 界面主题设置
- 个人偏好设置

### 3.7 数据统计与分析

- 实体总数、总价值统计
- 标签统计（物品分布）
- 空间分布统计
- 使用频率分析
- 实体状态分布分析
- 实体价值趋势分析
- 借出与归还统计
- 过保分析

## 4. 用户界面需求

### 4.1 通用界面元素

- 响应式设计（适配桌面和移动设备）
- 顶部导航栏
- 侧边菜单栏（可折叠）
- 用户信息显示与操作
- 面包屑导航

### 4.2 主要视图

#### 4.2.1 首页/仪表盘
- 欢迎消息
- 快速统计卡片（物品总数、总价值、借出物品数、待处理提醒数）
- 数据可视化图表（标签分布、物品使用频率等）
- 最近活动记录
- 待处理提醒列表

#### 4.2.2 实体管理视图
- 实体列表（表格形式）
- 实体树状视图
- 实体详情页
- 实体编辑表单
- 实体搜索与筛选控件

#### 4.2.3 标签管理视图
- 标签列表
- 标签编辑表单
- 标签与实体关联管理

#### 4.2.4 借出管理视图
- 借出记录列表
- 借出详情
- 借出记录创建与编辑表单

#### 4.2.5 提醒管理视图
- 提醒列表
- 提醒详情
- 提醒创建与编辑表单

#### 4.2.6 设置视图
- 系统设置表单
- 用户偏好设置

### 4.3 图表与统计
- 饼图（标签分布、状态分布等）
- 柱状图（空间分布等）
- 折线图（价值趋势等）
- 统计卡片

## 5. 非功能需求

### 5.1 性能要求
- 页面加载时间不超过3秒
- 支持大量实体数据的高效管理与检索

### 5.2 安全要求
- 用户认证与授权
- 数据访问控制（只允许访问自己的数据）
- 密码安全存储
- 防止XSS、CSRF等安全攻击

### 5.3 扩展性要求
- 系统架构应具有良好的扩展性
- 支持未来添加更多功能模块

### 5.4 用户体验要求
- 界面美观、操作简单直观
- 支持响应式设计，适配各种设备
- 提供友好的错误提示与帮助信息

## 6. 数据库设计

根据代码分析，系统主要包含以下数据表：

1. **用户表(user)** - 存储用户信息
2. **实体表(entity)** - 统一存储物品和空间信息
3. **实体图片表(entity_image)** - 存储实体的图片信息
4. **标签表(tag)** - 存储标签信息
5. **实体标签关联表(entity_tag)** - 维护实体与标签的多对多关系
6. **实体借出表(entity_lending)** - 记录实体的借出信息
7. **实体维护表(entity_maintenance)** - 记录实体的维护信息
8. **提醒表(reminder)** - 存储各类提醒信息
9. **系统设置表(system_setting)** - 存储系统配置参数

## 7. API接口设计

系统已实现RESTful API接口，主要包含以下几类：

1. **用户认证接口** - 处理登录、注册等认证请求
2. **实体管理接口** - 处理实体的增删改查、树形结构、统计等
3. **标签管理接口** - 处理标签的增删改查、关联管理等
4. **借出管理接口** - 处理借出记录的增删改查、状态管理等
5. **提醒管理接口** - 处理提醒的增删改查、状态管理等
6. **系统设置接口** - 处理系统参数的配置


## 前端技术栈改造分析

### 整体架构设计提示词

```
我正在将一个家庭物品管理系统从传统的服务端渲染(Thymeleaf+Bootstrap+jQuery)改造为现代前端技术栈(Vue)。请帮我设计一个合理的前端架构，包括:

1. 项目目录结构
2. 组件设计与拆分策略
3. 状态管理方案
4. 路由设计
5. API交互层设计
6. 权限控制实现
7. 国际化方案(可选)
8. 主题定制方案

系统主要功能模块包括:
- 用户认证(登录/注册)
- 仪表盘/统计页面(包含多种图表)
- 实体管理(物品和空间的CRUD)
- 标签管理
- 借出管理
- 提醒管理
- 系统设置

请提供详细的架构设计文档和关键代码示例。
```

### 特定组件开发提示词

```
请帮我使用[Vue]和[Element Plus]实现家庭物品管理系统的[特定组件名称]组件。该组件需要实现以下功能:

1. [具体功能描述]
2. [UI要求]
3. [交互逻辑]
4. [状态管理需求]
5. [API交互需求]

现有后端API接口:
- GET /api/[资源] - 获取[资源]列表
- POST /api/[资源] - 创建[资源]
- PUT /api/[资源]/{id} - 更新[资源]
- DELETE /api/[资源]/{id} - 删除[资源]

响应数据结构:
```json
{
  "code": 200,
  "message": "成功",
  "data": [...]
}
```

请提供完整的组件代码实现，包括TypeScript类型定义、样式和测试代码。
```

### 数据可视化实现提示词

```
请帮我使用[ECharts/Recharts]在[React/Vue]应用中实现家庭物品管理系统的数据可视化图表。我需要实现以下图表:

1. 物品标签分布饼图
2. 物品空间分布柱状图
3. 物品价值随时间变化趋势线图
4. 物品状态分布饼图
5. 物品使用频率统计图

后端API数据格式为:
```json
{
  "code": 200,
  "message": "成功",
  "data": {
    "tagDistribution": [{"name": "标签1", "value": 10}, ...],
    "spaceDistribution": [{"name": "空间1", "value": 5}, ...],
    "valueTrend": [{"date": "2023-01", "value": 1000}, ...],
    "statusDistribution": [{"status": "正常", "count": 20}, ...],
    "usageFrequency": [{"frequency": "每天", "count": 15}, ...]
  }
}
```

请提供完整的图表组件实现，包括:
1. 数据获取和处理逻辑
2. 图表配置及渲染代码
3. 图表交互功能(如点击、悬浮提示等)
4. 响应式适配方案
```

### 表单设计提示词

```
请帮我使用[React Hook Form/VeeValidate]和[Ant Design/Element Plus]实现家庭物品管理系统的[表单名称]表单。表单需要包含以下字段:

1. 名称(文本输入, 必填)
2. 类型(单选: 物品/空间)
3. 规格(文本输入, 可选)
4. 数量(数字输入, 仅当类型为物品时显示, 最小值1)
5. 价格(数字输入, 仅当类型为物品时显示)
6. 购买日期(日期选择器, 仅当类型为物品时显示)
7. 保修期(月)(数字输入, 仅当类型为物品时显示)
8. 使用频率(选择器: 每天/每周/每月/很少, 仅当类型为物品时显示)
9. 父实体(级联选择器, 显示空间层次结构)
10. 状态(选择器: 正常/损坏/丢弃/借出, 仅当类型为物品时显示)
11. 标签(多选标签组件)
12. 描述(文本区域)
13. 图片上传(多图片上传组件)

请实现以下功能:
1. 表单字段验证
2. 字段联动逻辑
3. 表单提交处理
4. 与后端API对接

API接口:
- POST /api/entities - 创建实体
- PUT /api/entities/{id} - 更新实体
- POST /api/entity-images/upload - 上传图片

请提供完整的表单组件代码实现。
```

### 路由与权限控制提示词

```
请帮我使用[React Router/Vue Router]和[Redux/Pinia]实现家庭物品管理系统的路由与权限控制。系统包含以下路由:

1. /login - 登录页
2. /register - 注册页
3. /dashboard - 仪表盘(需登录)
4. /entities - 实体管理(需登录)
5. /entities/:id - 实体详情(需登录)
6. /entities/new - 新增实体(需登录)
7. /entities/:id/edit - 编辑实体(需登录)
8. /tags - 标签管理(需登录)
9. /lending - 借出管理(需登录)
10. /reminders - 提醒管理(需登录)
11. /settings - 系统设置(需登录)

权限控制要求:
1. 未登录用户只能访问登录和注册页
2. 已登录用户可访问其他所有页面
3. 用户只能看到和操作自己的数据
4. 把用户信息和权限存储在全局状态中
5. 实现路由守卫检查权限

请提供:
1. 路由配置代码
2. 权限控制逻辑
3. 全局状态设计
4. 路由守卫实现
```

### API服务层设计提示词

```
请帮我使用TypeScript和Axios设计家庭物品管理系统的API服务层。系统有以下主要API:

1. 用户认证相关:
   - POST /api/auth/login - 用户登录
   - POST /api/auth/register - 用户注册
   - POST /api/auth/logout - 用户登出

2. 实体管理相关:
   - GET /api/entities/page - 分页获取实体列表
   - GET /api/entities/:id - 获取实体详情
   - POST /api/entities - 创建实体
   - PUT /api/entities/:id - 更新实体
   - DELETE /api/entities/:id - 删除实体
   - GET /api/entities/tree - 获取实体树

3. 标签管理相关:
   - GET /api/tags - 获取标签列表
   - POST /api/tags - 创建标签
   - PUT /api/tags/:id - 更新标签
   - DELETE /api/tags/:id - 删除标签

4. 借出管理相关:
   - POST /api/entity-lendings - 创建借出记录
   - PUT /api/entity-lendings/:id - 更新借出记录
   - GET /api/entity-lendings/unreturned - 获取未归还记录

5. 提醒管理相关:
   - GET /api/reminders - 获取提醒列表
   - POST /api/reminders - 创建提醒
   - PUT /api/reminders/:id - 更新提醒

请实现:
1. 统一的API请求基础配置(拦截器、错误处理等)
2. 各模块API服务封装
3. TypeScript接口定义
4. 请求与响应类型定义
5. API调用示例
```

### 主题与响应式设计提示词

```
请帮我实现家庭物品管理系统的主题切换和响应式设计方案。要求:

1. 主题切换:
   - 支持明亮模式和暗黑模式
   - 可自定义主题色
   - 主题设置持久化存储
   - 支持跟随系统主题自动切换

2. 响应式设计:
   - 桌面端(>1200px)完整显示所有功能
   - 平板端(768px-1199px)适当调整布局
   - 移动端(<768px)优化交互和布局
   - 关键数据和操作在各尺寸设备上均可访问

3. 技术要求:
   - 使用[CSS-in-JS/Tailwind CSS/Sass]实现样式管理
   - 在[React/Vue]框架中实现
   - 考虑到性能优化

请提供:
1. 主题配置代码
2. 主题切换组件实现
3. 响应式布局关键代码
4. 主要页面的响应式设计示例
```

这些AI提示词覆盖了前端改造的主要方面，可以根据实际项目需求进行调整和扩展。
