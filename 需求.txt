角色和目标：
您是一名专业的编程助理，可协助开发人员完成代码编写、优化和调试任务。您的目标是确保您的代码高质量、逻辑严谨，并且优化不会引入新问题。
工作原理：
严谨：
在没有明确提示的情况下，请勿更改代码。
每次对代码进行更改时，都必须充分了解其功能和上下文，以确保更改不会破坏现有逻辑。
对于不确定的部分，主动询问开发人员，而不是假设或猜测。
全局理解：
在编写或优化代码时，对项目逻辑有全面的了解非常重要。
确保代码与项目的整体架构、设计模式和业务逻辑一致。
避免局部优化导致全局问题。
优化意识：
每次优化代码时，都必须考虑它对整个项目的影响。
优先解决性能瓶颈、代码冗余和潜在风险，而不是不必要的“完美”。
优化后，代码的可读性、可维护性和可扩展性不受影响。
代码质量：
遵循最佳实践以确保一致的代码样式、命名约定和清晰的注释。
避免重复代码并明智地使用函数、类和模块。
对于关键逻辑和复杂部分，请添加必要的注释和文档。
测试与验证：
每次修改代码后，都必须对其进行充分测试，以确保其正常运行且没有副作用。
对于核心功能，请提供单元测试或集成测试用例。
如果测试失败，请优先解决问题，而不是忽略或绕过它。
沟通和反馈：
在遇到不确定或复杂的问题时主动与开发人员沟通，而不是自己做决定。
为开发人员可以理解的每项修改和优化提供清晰的解释和理由。
接受反馈并及时调整您的工作方式。
最终目标：
通过严谨的工作方式和大局观，帮助开发人员高效地完成项目，同时确保代码高质量、合乎逻辑且易于维护。


# 家庭物品管理系统需求文档
## 1. 项目概述
家庭物品管理系统是一个用于管理家庭物品和空间的Web应用程序，采用Java Spring Boot框架开发。该系统旨在帮助用户有效地组织、追踪和管理家庭中的各种物品和空间，包括物品的位置、状态、价值、借出记录等信息，以及提供提醒功能和数据分析功能。
## 2. 系统架构
### 2.1 技术栈
- 后端：Spring Boot、MyBatis-Plus、Spring Security
- 前端：Thymeleaf、Bootstrap 5、jQuery、ECharts
- 数据库：未明确指定，但代码显示使用关系型数据库（可能是MySQL）

### 2.2 主要模块
1. 用户认证与授权
2. 实体管理（物品/空间）
3. 标签管理
4. 借出管理
5. 提醒管理
6. 系统设置
7. 数据统计与分析

## 3. 功能需求

### 3.1 用户认证与授权

- 用户注册、登录、登出功能
- 密码找回
- 用户权限管理
- 用户个人信息管理

### 3.2 实体管理

#### 3.2.1 实体模型

实体统一表示物品和空间，具有以下基本属性：
- 实体ID（自增主键）
- 名称（必填）
- 类型（item/space，必填）
- 编码
- 规格
- 数量（物品专用）
- 价格（物品专用）
- 购买日期（物品专用）
- 保修期（月）（物品专用）
- 保修截止日期（物品专用）
- 使用频率（daily/weekly/monthly/rarely）（物品专用）
- 使用年限（物品专用）
- 使用人ID与姓名（物品专用）
- 父实体ID与名称（表示物品/空间存放在哪个实体中）
- 层级、路径、排序（空间专用，用于树状结构）
- 状态（normal/damaged/discarded/lent）（物品专用）
- 描述/备注
- 标签列表
- 图片列表
- 所有者ID（必填）
- 创建者ID、创建时间、更新时间

#### 3.2.2 实体管理功能

- 实体的增删改查
- 实体树形结构管理（空间嵌套）
- 实体列表筛选（按类型、状态、标签等）
- 实体搜索
- 实体详情查看
- 实体图片上传与管理
- 实体标签关联管理
- 数据导入导出（PDF/Excel）

### 3.3 标签管理

- 标签的增删改查
- 按所有者查询标签
- 获取物品的标签
- 设置物品的标签关联

### 3.4 借出管理

- 创建、更新、删除借出记录
- 借出状态管理（已借出、已归还、逾期等）
- 实体归还功能
- 借出记录查询（按实体、状态等）
- 未归还记录查询
- 借出状态自动检查与更新

### 3.5 提醒管理

- 创建、更新、删除提醒
- 提醒类型：保修到期、定期维护、借用归还、实体过期等
- 待处理提醒查询
- 提醒状态管理

### 3.6 系统设置

- 系统参数配置
- 界面主题设置
- 个人偏好设置

### 3.7 数据统计与分析

- 实体总数、总价值统计
- 标签统计（物品分布）
- 空间分布统计
- 使用频率分析
- 实体状态分布分析
- 实体价值趋势分析
- 借出与归还统计
- 过保分析

## 4. 用户界面需求

### 4.1 通用界面元素

- 响应式设计（适配桌面和移动设备）
- 顶部导航栏
- 侧边菜单栏（可折叠）
- 用户信息显示与操作
- 面包屑导航

### 4.2 主要视图

#### 4.2.1 首页/仪表盘
- 欢迎消息
- 快速统计卡片（物品总数、总价值、借出物品数、待处理提醒数）
- 数据可视化图表（标签分布、物品使用频率等）
- 最近活动记录
- 待处理提醒列表

#### 4.2.2 实体管理视图
- 实体列表（表格形式）
- 实体树状视图
- 实体详情页
- 实体编辑表单
- 实体搜索与筛选控件

#### 4.2.3 标签管理视图
- 标签列表
- 标签编辑表单
- 标签与实体关联管理

#### 4.2.4 借出管理视图
- 借出记录列表
- 借出详情
- 借出记录创建与编辑表单

#### 4.2.5 提醒管理视图
- 提醒列表
- 提醒详情
- 提醒创建与编辑表单

#### 4.2.6 设置视图
- 系统设置表单
- 用户偏好设置

### 4.3 图表与统计
- 饼图（标签分布、状态分布等）
- 柱状图（空间分布等）
- 折线图（价值趋势等）
- 统计卡片

## 5. 非功能需求

### 5.1 性能要求
- 页面加载时间不超过3秒
- 支持大量实体数据的高效管理与检索

### 5.2 安全要求
- 用户认证与授权
- 数据访问控制（只允许访问自己的数据）
- 密码安全存储
- 防止XSS、CSRF等安全攻击

### 5.3 扩展性要求
- 系统架构应具有良好的扩展性
- 支持未来添加更多功能模块

### 5.4 用户体验要求
- 界面美观、操作简单直观
- 支持响应式设计，适配各种设备
- 提供友好的错误提示与帮助信息

## 6. 数据库设计

根据代码分析，系统主要包含以下数据表：

1. **用户表(user)** - 存储用户信息
2. **实体表(entity)** - 统一存储物品和空间信息
3. **实体图片表(entity_image)** - 存储实体的图片信息
4. **标签表(tag)** - 存储标签信息
5. **实体标签关联表(entity_tag)** - 维护实体与标签的多对多关系
6. **实体借出表(entity_lending)** - 记录实体的借出信息
7. **实体维护表(entity_maintenance)** - 记录实体的维护信息
8. **提醒表(reminder)** - 存储各类提醒信息
9. **系统设置表(system_setting)** - 存储系统配置参数

## 7. API接口设计

系统已实现RESTful API接口，主要包含以下几类：

1. **用户认证接口** - 处理登录、注册等认证请求
2. **实体管理接口** - 处理实体的增删改查、树形结构、统计等
3. **标签管理接口** - 处理标签的增删改查、关联管理等
4. **借出管理接口** - 处理借出记录的增删改查、状态管理等
5. **提醒管理接口** - 处理提醒的增删改查、状态管理等
6. **系统设置接口** - 处理系统参数的配置

## 8. 部署要求

- Java 17或更高版本
- 支持Spring Boot应用的Web服务器（如Tomcat）
- 关系型数据库（如MySQL）
- 支持现代Web标准的浏览器

## 9. 开发环境与工具

- IDE：任意支持Java和Web开发的IDE（如IntelliJ IDEA、Eclipse）
- 构建工具：Maven
- 版本控制：Git
- API测试：Postman或类似工具

